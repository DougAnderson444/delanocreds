var searchIndex = JSON.parse('{\
"delanocreds":{"doc":"<strong>Del</strong>egatable <strong>Ano</strong>nymous <strong>Cred</strong>ential<strong>s</strong> (Delanocreds)","t":"DDDLALLLLLLALLLLLLLLLALLLLLLLLLLALLLLLLLLALLLLLLLLLALLLLLADFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRDDLLLLLLLLFLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLDNNNDEDDDDDDNDNNDELLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLMMMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFMLLLLLLLLLLLLDNGDNEGLLLLLLLFFLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLFMLLLLLLLLLLLLMMLLLIDDDLLLLLLLLLLLLLLLLLLLLLLLMMFLLLLLLMKLLLFLLMMMKLLLLLLLLLLLLLLLLLLGNNNNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDDDGDGIDDLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLMLLLLLLLLLLLLMKLLLLLLLMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CredentialBuilder","OfferBuilder","ProofBuilder","additional_entry","attributes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","config","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","entry","from","from","from","init","init","init","into","into","into","issue_to","keypair","max_entries","max_entries","new","new","new","offer_to","prove","select_attribute","set_commits","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","vzip","vzip","vzip","with_entry","without_attribute","zkp","Attribute","attribute","borrow","borrow_mut","cid","clone","clone_into","deref","deref","deref_mut","digest","drop","eq","fmt","fmt","from","from","from","from_cid","hash","init","into","new","to_owned","to_string","to_string_of_base","try_from","try_from","try_into","type_id","vzip","CHALLENGE_STATE_NAME","DEFAULT_MAX_CARDINALITY","DEFAULT_MAX_ENTRIES","Entry","MaxEntries","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","convert_entry_to_bn","default","deref","deref","deref","deref","deref_mut","deref_mut","drop","drop","entry","eq","eq","fmt","fmt","from","from","from","from","from_iter","init","init","into","into","into_iter","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CredProof","G1","G2","InvalidNymProof","Issuer","IssuerError","IssuerPublic","MaxCardinality","Nym","NymProof","NymPublic","Offer","SerzDeserzError","Signature","TooLargeCardinality","TooLongEntries","UserKey","VK","accept","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenge","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","credential","damgard","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","issue_cred","new","new","new","new","nym","offer","offer_builder","parameters","parameters","pedersen_commit","pedersen_open","proof","proof_builder","prove","provide","public","public","public_key","response","spseq_uc","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify_proof","vk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Credential","Error","OpeningInformation","RandomizedPubKey","SerzDeserzError","UpdateError","UpdateKey","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","change_rel","change_rep","clone","clone","clone_into","clone_into","commitment_vector","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","init","init","init","into","into","into","opening_vector","provide","rndmz_pk","sigma","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_key","vk","vzip","vzip","vzip","Commitment","CrossSetCommitment","ParamSetCommitment","SetCommitment","aggregate_cross","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commit_set","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","g_1","g_2","generate_pre_commit","init","init","init","into","into","into","max_cardinality","new","new","new","new","not_intersection","open_set","open_subset","param_sc","pp_commit_g1","pp_commit_g2","public_parameters","public_parameters","public_parameters","setup","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_cross","verify_subset","vzip","vzip","vzip","CommitmentType","G1","G1","G2","G2","Generator","GeneratorG1","GeneratorG2","Group","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","init","init","init","init","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Challenge","ChallengeState","DamgardTransform","Pedersen","PedersenCommit","PedersenOpen","Response","Schnorr","ZKPSchnorr","ZkpSchnorrFiatShamir","announce","announce","announce_element","announce_randomness","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenge","challenge","clone","clone","clone","clone_into","clone_into","clone_into","commit","decommit","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","element","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","g","g","h","hash","hash","hash","init","init","init","init","init","init","into","into","into","into","into","into","name","new","new","new","new","new","new","non_interact_prove","non_interact_verify","open_randomness","pedersen","response","setup","setup","statement","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"delanocreds"],[58,"delanocreds::attributes"],[89,"delanocreds::config"],[92,"delanocreds::entry"],[139,"delanocreds::keypair"],[376,"delanocreds::keypair::spseq_uc"],[448,"delanocreds::set_commits"],[514,"delanocreds::types"],[604,"delanocreds::zkp"]],"d":["Builds a Credential","Builds a Credential Offer","Proof Builder Takes selected Attributes and a Credential …","Add one (1) additional Entry to the Credential Offer. …","A module for creating:","","","","","","","Configuration of the Root Issuer and the Credential Issuer.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Finish building the Credetials, and Issue the Credential …","This is implementation of delegatable anonymous credential …","Set the number of Entries that can be added to the …","Set the maximum number of Entries that can be added to the …","Create a new CredentialBuilder","","Create a new ProofBuilder","Build the Offer","Finish building the Proof","Add an Attribute to the Proof","","","","","","","","","","","","","","","Add an Entry to the Credential","Allows the proving of Attributes in an Entry in the …","","","Converts any type that can be converted to a byte slice …","","","Returns teh CID of the Attribute","","","","","","Returns the bytes representation of the hash digest","","","","","Returns the argument unchanged.","","","Generate an attribute from a CID Check to verify that the …","Returns the Multihash of the Attribute","","Calls <code>U::from(self)</code>.","Create a new Attribute from a string","","","Returns the string representation of the Attribute CID …","","","","","","","Default Max Cardinality: The maximum number of total …","Default Max Attributes: The maximum number of attribute …","","","","","","","","","","","Iterates through each Attribute in the Entry and converts …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Credentials Proof, struct which holds all the information …","","","","Root Issuer aka Certificate Authority","","","","Nym","NymProof","Pseudonym Public information","Newtype wrapper for a Credential which has an orphan …","","Signature of a Credential","","","","Verification Key This key has elements from both G1 and G2,","Accept the credential and adapt Signature back to Self.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build a Credential using this Issuer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a root credential to a user’s pseudonym (…","","","Create a new Nym associated to the Public Parameters (…","","Generates a pseudonym for the user tuned to this Issuer’…","Creates an orphan Offer for a Credential.","Creates an super::OfferBuilder for a Credential using this …","","","","","","Create a super::ProofBuilder for a Credential and Entrys …","Prove selected crate::attributes::Attributes for a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies a Signature for a given message set against a VK …","Verify a proof of a Credential","","","","","","","","","","","","","","A Credential is an EqcSignature signature returned by the …","","","","","","Update Key alias","","","","","","","","Change Relations of a Credential. Push additional Entry …","Change the Representative of the signature message pair to …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Public trait Commitment common for both SetCommitment and …","CrossSetCommitment extends the Set Commitment to provide …","Public Parameters of the Set Commitment","","Computes an aggregate proof of valid subsets of a set of …","","","","","","","","","Commit to a set of messages","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new commitment scheme.","Creates a new commitment scheme.","Creates a new commitment scheme.","New constructor. Initializes the ParamSetCommitment","Returns where the two Arguments do not intersect","Open a commitment to a set of messages. This is the …","Opens a subet of Attributes for an Entry <code>open_subset</code> …","","","","Public parameters of the commitment scheme.","","Exports the public parameters of the commitment scheme. …","Generates a new commitment scheme.","","","","","","","","","","","Verifies an aggregate proof of valid subsets of a set of …","VerifySubset verifies the witness for the subset. Verifies …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Schnorr (interactive) proof of the statement ZK(x ; h = …","","Schnorr proof (non-interactive using Fiat Shamir …","","","","","","","","","","","","","","","","","The code below is from the original implementation of the …","","","","","","","","","Decrypts/Decommits the message","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Schnorr proof (non-interactive using FS heuristic)","Verify the statement ZK(x ; h = g^x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify the statement ZK(x ; h = g^x)","","","","","","",""],"i":[0,0,0,1,0,4,1,12,4,1,12,0,4,1,12,4,1,12,4,1,12,0,4,1,12,4,1,12,4,1,12,4,0,4,1,4,1,12,1,12,12,0,4,1,12,4,1,12,4,1,12,0,4,1,12,4,1,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,2,28,2,28,2,28,2,28,0,28,2,2,28,28,2,28,2,28,0,2,28,2,28,2,28,28,28,2,2,28,2,28,2,2,28,2,28,2,28,2,28,2,28,2,28,0,35,35,7,0,0,0,0,0,0,0,0,7,0,7,7,0,0,10,10,9,64,38,10,44,34,7,35,5,36,37,33,9,64,38,10,44,34,7,35,5,36,37,33,36,34,7,35,5,36,37,33,34,7,35,5,36,37,33,9,5,9,38,34,9,64,38,10,44,34,34,7,35,5,36,37,33,33,9,64,38,10,44,34,7,35,5,36,37,33,9,64,38,10,44,34,7,35,5,36,37,33,34,35,36,37,33,36,34,7,7,35,36,37,33,9,64,38,10,44,34,34,34,34,7,7,35,5,36,37,33,33,36,9,64,38,10,44,34,7,35,5,36,37,33,9,64,38,10,44,34,7,35,5,36,37,33,9,9,38,10,34,38,10,10,64,5,36,36,5,10,10,7,9,10,36,36,0,34,7,35,5,36,37,33,7,9,64,38,10,44,34,7,35,5,36,37,33,9,64,38,10,44,34,7,35,5,36,37,33,9,64,38,10,44,34,7,35,5,36,37,33,0,0,64,9,64,38,10,44,34,7,35,5,36,37,33,0,47,0,0,47,0,0,40,47,6,40,47,6,40,0,0,6,40,6,40,6,47,6,40,40,47,6,40,47,6,40,6,40,40,47,47,6,40,47,47,47,6,6,40,40,47,6,40,47,6,40,6,47,0,6,6,40,47,47,6,40,47,6,40,47,6,40,6,6,47,6,40,0,0,0,0,50,49,50,42,49,50,42,42,42,65,49,50,42,49,50,42,49,50,42,42,49,50,42,42,42,0,49,50,42,49,50,42,42,65,49,50,42,0,65,65,50,42,42,65,49,50,65,42,49,50,42,49,50,42,49,50,42,50,65,49,50,42,0,51,52,51,52,0,0,0,0,51,52,53,54,51,52,53,54,51,52,53,54,51,52,53,54,51,52,53,53,54,54,51,52,53,54,51,52,53,54,53,54,53,54,51,51,52,52,53,53,54,54,51,52,53,53,54,53,54,51,52,53,54,51,52,53,54,51,52,53,54,51,52,53,54,51,52,53,54,51,52,53,54,51,52,53,54,51,52,53,54,0,0,0,0,0,0,0,0,0,0,55,56,60,60,57,62,55,56,59,60,57,62,55,56,59,60,62,66,56,59,60,56,59,60,59,59,62,59,57,62,55,56,59,60,57,62,55,56,59,60,57,62,55,56,59,60,60,59,60,59,60,59,60,57,62,55,56,59,60,57,59,59,59,60,57,57,62,55,56,59,60,57,62,55,56,59,60,57,66,57,62,55,56,59,62,62,60,56,66,62,66,57,56,59,60,57,62,55,56,59,60,57,62,55,56,59,60,57,62,55,56,59,60,55,56,57,62,55,56,59,60],"f":[0,0,0,[[1,2],1],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[3],[3],[3],[3],[3],[3],[3],[3],[3],0,[[]],[[]],[[]],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[4,5],[[8,[6,7]]]],0,[[4,3],4],[[1,3],1],[9,4],[[10,6,[11,[2]]],1],[[10,6,[11,[2]]],12],[[1,5],8],[12],[[12,13],12],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],0,[[]],[[]],[[]],[[4,2],4],[[1,13],1],0,0,[[[17,[[11,[16]]]]],13],[[]],[[]],[13,18],[13,13],[[]],[13],[3],[3],[13,[[11,[16]]]],[3],[[13,13],19],[[13,20],21],[[13,20],21],[[]],[22,13],[23,13],[18,[[24,[13]]]],[13,25],[[],3],[[]],[[[17,[[11,[16]]]]],13],[[]],[[],22],[[13,26],[[14,[22,27]]]],[[],14],[18,[[14,[13]]]],[[],14],[[],15],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[2,2],[28,28],[[]],[[]],[2,[[14,[[30,[29]],31]]]],[[],28],[2],[3],[3],[28,3],[3],[3],[3],[3],[[[11,[13]]],2],[[2,2],19],[[28,28],19],[[2,20],21],[[28,20],21],[[]],[16,28],[[]],[3,28],[32,2],[[],3],[[],3],[[]],[[]],[2],[[[11,[13]]],2],[3,28],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[10,33],6],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[34,34],[7,7],[35,35],[5,5],[36,36],[37,37],[33,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,4],0,[[],9],[[],38],[[],34],[3],[3],[3],[3],[3],[34,3],[3],[3],[3],[3],[3],[3],[33],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[34,34],19],[[35,35],19],[[36,36],19],[[37,37],19],[[33,33],19],[[],19],[[34,20],21],[[7,20],21],[[7,20],21],[[35,20],21],[[36,20],21],[[37,20],21],[[33,20],21],[[]],[[]],[[]],[[]],[[]],[16,34],[3,34],[[]],[3,34],[[]],[31,7],[[]],[[]],[[]],[[]],[6,33],[[]],[[36,39]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,[11,[2]],[24,[3]],5],[[8,[6,7]]]],[[34,28],9],[[],38],[[40,[41,[29]],42],10],[3,34],[[38,42],10],[[10,6,[24,[2]],5],[[8,[33,43]]]],[[10,6,[11,[2]]],1],0,0,0,0,0,[[10,6,[11,[2]]],12],[[10,6,[11,[2]],[11,[2]]],44],[45],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[11,[35]],46,[11,[46]],37],19],[[[11,[35]],44,[11,[2]]],[[8,[19,7]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[40,46],[[]],[[]],[[]],[[]],[[]],[[]],[[42,2,6,29],[[8,[6,47]]]],[[46,6,29,29,19]],[6,6],[40,40],[[]],[[]],0,[3],[3],[40],[3],[3],[3],[3],[3],[3],[3],[[6,6],19],[[40,40],19],[[],19],[[47,20],21],[[47,20],21],[[6,20],21],[[40,20],21],[[]],[31,47],[7,47],[33,6],[[]],[[]],[[40,39]],[[],3],[[],3],[[],3],[[]],[[]],[[]],0,[45],[[46,29,29,46],40],0,[[]],[[]],[[],22],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],0,0,[[]],[[]],[[]],0,0,0,0,[[[11,[46]],[11,[46]]],46],[[]],[[]],[[]],[[]],[[]],[[]],[42,42],[[]],[[42,2],[[14,[31]]]],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[42,20],21],[[]],[[]],[[]],0,0,[[48,42],46],[[],3],[[],3],[[],3],[[]],[[]],[[]],0,[34],[34,49],[34,50],[3,42],[[[11,[29]],[30,[29]]],[[30,[29]]]],[[42,46,29,2],[[14,[19,31]]]],[[42,2,29,2],[[14,[[24,[46]],31]]]],0,0,0,[[],42],[49,42],[50,42],[34,42],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[42,[11,[46]],[11,[2]],46],[[14,[19,31]]]],[[42,46,2,46],[[14,[19,31]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,51],[52,52],[53,53],[54,54],[[]],[[]],[[]],[[]],[3],[3],[53],[3],[54],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[53,53],19],[[54,54],19],[[],19],[[],19],[[51,20],21],[[51,20],21],[[52,20],21],[[52,20],21],[[53,20],21],[[53,20],21],[[54,20],21],[[54,20],21],[[]],[[]],[[]],[46,53],[[]],[[53,39]],[[54,39]],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[55],[56],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,29],[57,58],[56,56],[59,59],[60,60],[[]],[[]],[[]],[[59,29]],[[59,60,61],19],[[],62],[[],59],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[60,46]],[[59,59],19],[[60,60],19],[[],19],[[],19],[[59,20],21],[[60,20],21],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[59,39]],[[60,39]],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[51,[30,[52]],[11,[16]]],57],[[],62],[[],55],[[],56],[[],59],[[63,[30,[63]],[30,[[41,[29]]]]],8],[[63,[11,[63]]],19],0,0,[[58,29,40,[41,[29]]],29],[[],63],[[],46],0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[55,58,46,46,29],19],[[36,56],19],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"OfferBuilder"],[3,"Entry"],[15,"usize"],[3,"CredentialBuilder"],[3,"NymPublic"],[3,"Credential"],[4,"IssuerError"],[6,"Result"],[3,"Issuer"],[3,"Nym"],[15,"slice"],[3,"ProofBuilder"],[3,"Attribute"],[4,"Result"],[3,"TypeId"],[15,"u8"],[8,"AsRef"],[6,"Cid"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"String"],[15,"str"],[4,"Option"],[6,"Multihash"],[4,"Base"],[4,"Error"],[3,"MaxEntries"],[3,"FieldElement"],[3,"Vec"],[4,"SerzDeserzError"],[8,"IntoIterator"],[3,"Offer"],[3,"MaxCardinality"],[4,"VK"],[3,"NymProof"],[3,"Signature"],[3,"UserKey"],[8,"Hasher"],[3,"RandomizedPubKey"],[3,"Secret"],[3,"ParamSetCommitment"],[3,"Error"],[3,"CredProof"],[3,"Demand"],[3,"G1"],[4,"UpdateError"],[3,"UnivarPolynomial"],[3,"SetCommitment"],[3,"CrossSetCommitment"],[4,"Generator"],[4,"Group"],[3,"GeneratorG1"],[3,"GeneratorG2"],[3,"ZKPSchnorr"],[3,"DamgardTransform"],[3,"ChallengeState"],[6,"Challenge"],[3,"Pedersen"],[3,"PedersenOpen"],[6,"PedersenCommit"],[3,"ZkpSchnorrFiatShamir"],[3,"G2"],[3,"IssuerPublic"],[8,"Commitment"],[8,"Schnorr"]]},\
"delanocreds_bin":{"doc":"A quick binary to test the library and get some –release …","t":"FFF","n":["basic_bench","bench_30_of_100","main"],"q":[[0,"delanocreds_bin"]],"d":["","",""],"i":[0,0,0],"f":[[[],1],[[],1],[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
