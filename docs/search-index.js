var searchIndex = JSON.parse('{\
"delanocreds":{"doc":"Delanocreds API","t":"DDDLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLALLLLLLLLLAALLLADLFLLLLLLLLLLLLFLLLLLLLLLLLLDDDNNDDDDDDDDELLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMLMMMMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFMLLLLLLLLLLLLDNGDNEGLLLLLLLFLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMFMLLLLLLLLLLLMLLLIDDDLLLLLLLLLLLLLLLLLLLLLLLMMFLLLLLLMKLLLFLLMMMKLLLLLLLLLLLLLLLLLLGDDGDGMMLLLLLLLLLLLLLFFLLLLLLLLLLLLFLFLLLLLLLLLLLMMLLLLLLLLLLLMFLLLLLLLLLLLLLLLGDDNNEGIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMKLLLLLMLLLMLLLLLLLLLLLLLLLLLLLLLLLLL","n":["EntryBuilder","RootIssuer","RootIssuerBuilder","attribute","attributes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drain","drop","drop","drop","entry","fmt","fmt","from","from","from","init","init","init","into","into","into","keypair","max_cardinality","max_entries","new","new","set_commits","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","utils","vzip","vzip","vzip","zkp","Attribute","as_ref","attribute","borrow","borrow_mut","clone","clone_into","deref","deref","deref_mut","drop","eq","fmt","fmt","from","from_cid","hash","init","into","new","to_owned","to_string","to_string_of_base","try_from","try_from","try_into","type_id","vzip","CredOffer","CredProof","DelegatedCred","G1","G2","MaxCardinality","MaxEntries","Nym","NymProof","NymPublic","Signature","Signer","UserKey","VK","accept","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenge","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cred","damgard","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","issue_cred","new","new","new","new","nym","nym","offer","pedersen_commit","pedersen_open","proof","prove","public","public_key","public_parameters","public_parameters","response","spseq_uc","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify_proof","vk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Credential","Error","OpeningInformation","RandomizedPubKey","SerzDeserzError","UpdateError","UpdateKey","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","change_rep","clone","clone","clone_into","clone_into","commitment_vector","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","equivalent","fmt","fmt","from","from","from","from","hash","init","init","init","into","into","into","opening_vector","rndmz_pk","sigma","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_key","vzip","vzip","vzip","Commitment","CrossSetCommitment","ParamSetCommitment","SetCommitment","aggregate_cross","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commit_set","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","g_1","g_2","generate_pre_commit","init","init","init","into","into","into","max_cardinality","new","new","new","new","not_intersection","open_set","open_subset","param_sc","pp_commit_g1","pp_commit_g2","public_parameters","public_parameters","public_parameters","setup","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_cross","verify_subset","vzip","vzip","vzip","CommitmentType","Entry","Pedersen","PedersenCommit","PedersenOpen","Trapdoor","announce_element","announce_randomness","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commit","convert_entry_to_bn","convert_mhash_to_bn","decommit","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","ec_sum","element","entry","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","g","h","hash","hash","init","init","init","into","into","into","into_iter","new","new","open_randomness","polyfromroots","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Challenge","ChallengeState","DamgardTransform","G1","G2","Generator","Response","Schnorr","ZKPSchnorr","ZkpSchnorrFiatShamir","announce","announce","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenge","challenge","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","g","hash","init","init","init","init","init","into","into","into","into","into","name","new","new","new","new","non_interact_prove","non_interact_verify","pedersen","response","setup","setup","statement","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"delanocreds"],[55,"delanocreds::attributes"],[83,"delanocreds::keypair"],[300,"delanocreds::keypair::spseq_uc"],[363,"delanocreds::set_commits"],[429,"delanocreds::types"],[430,"delanocreds::utils"],[508,"delanocreds::zkp"]],"d":["Builds the entries for the Root Credential. Ensures that …","The Root Issuer, the one with the Verification Key that …","The Root Issuer, the one with the Verification Key that …","Wraps the value as an Attribute for an entry. An attribute …","A module for creating:","","","","","","","","","","","","","","Build all entires from each entry","","","","Builds an Entry out of a vector of attributes","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This is implementation of delegatable anonymous credential …","Add cardinality to the credential. Attribute Type checks …","Add attributes to the credential. Attribute Type checks to …","","","","","","","","","","","","","","","","","","","","","Converts any type that can be converted to a byte slice …","","","","","","","","","","","","Returns the argument unchanged.","Generate an attribute from a CID Check to verify that the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","CredOffer (cred_R)","Credentials Proof","DelegateeCred","","","","","Nym","NymProof","Pseudonym Public information","","Root Issuer aka Certificate Authority","","Verification Key This key has elements from both G1 and G2,","Delegated User (delegatee) uses this function to anonimize …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Issues a root credential to a user.","","","","","Generates a pseudonym for the user tuned to this Signer’…","","Creates an offer for a credential. Note: This orphan …","","","","Prove a Credential Generates a proof of a credential for a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies a signature for a given message set","Verify proof of a credential","","","","","","","","","","","","","","A [<code>DelegatableKey</code>] Credential is an EqcSignature signature …","","","","","","Update Key alias","","","","","","","","Change representation of the signature message pair to a …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Public trait Commitment common for both SetCommitment and …","CrossSetCommitment extends the Set Commitment to provide …","Public Parameters of the Set Commitment","","Computes an aggregate proof of valid subsets of a set of …","","","","","","","","","Commit to a set of messages","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new commitment scheme.","Creates a new commitment scheme.","Creates a new commitment scheme.","New constructor. Initializes the ParamSetCommitment","Returns where the two Arguments do not intersect","Open a commitment to a set of messages. This is the …","Opens a subet of Attributes for an Entry <code>open_subset</code> …","","","","Public parameters of the commitment scheme.","","Exports the public parameters of the commitment scheme. …","Generates a new commitment scheme.","","","","","","","","","","","Verifies an aggregate proof of valid subsets of a set of …","VerifySubset verifies the witness for the subset. Verifies …","","","","","","","","","","","","","","","","","","","","","","","","","Iterates through each Attribute in the Entry and converts …","Convert existing given hash  to a FieldElement This is …","Decrypts/Decommits the message","","","","","","","","","","","","Sum EC points list.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns the coefficients of a polynomial with the given …","","","","","","","","","","","","","","","","","","","","","","","Schnorr (interactive) proof of the statement ZK(x ; h = …","","Schnorr proof (non-interactive using Fiat Shamir …","","","","","","","","","","","","","The code below is from the original implementation of the …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Schnorr proof (non-interactive using FS heuristic)","Verify the statement ZK(x ; h = g^x)","","","","","","","","","","","","","","","","","","","","","","","","Verify the statement ZK(x ; h = g^x)","","","","","",""],"i":[0,0,0,1,0,1,4,12,1,4,12,4,1,4,12,1,4,12,1,1,4,12,1,4,12,1,4,12,1,4,12,1,4,12,0,4,4,1,4,0,1,4,12,1,4,12,1,4,12,0,0,1,4,12,0,0,3,0,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,27,27,0,0,0,0,0,0,0,0,0,24,24,33,31,24,25,37,26,13,14,27,28,29,30,33,31,24,25,37,26,13,14,27,28,29,30,29,13,14,27,28,29,30,13,14,27,28,29,30,26,28,31,33,31,24,25,37,26,13,13,14,14,27,28,29,30,33,31,24,25,37,26,13,14,27,28,29,30,33,31,24,25,37,26,13,14,27,28,29,30,13,14,29,29,13,14,27,29,33,31,24,25,37,26,13,13,13,14,14,27,28,29,30,29,33,31,24,25,37,26,13,14,27,28,29,30,33,31,24,25,37,26,13,14,27,28,29,30,33,33,31,13,14,31,26,24,29,29,28,26,24,29,33,28,29,0,13,14,27,28,29,30,33,31,24,25,37,26,13,14,27,28,29,30,33,31,24,25,37,26,13,14,27,28,29,30,33,31,24,25,37,26,13,14,27,28,29,30,0,0,33,33,31,24,25,37,26,13,14,27,28,29,30,0,41,0,0,41,0,0,39,41,34,39,41,34,39,0,34,39,34,39,34,41,34,39,39,41,34,39,41,34,39,39,39,41,39,41,41,34,39,39,41,34,39,41,34,39,34,0,34,34,39,41,34,39,41,34,39,41,34,39,34,41,34,39,0,0,0,0,44,43,44,36,43,44,36,36,36,57,43,44,36,43,44,36,43,44,36,36,43,44,36,36,36,0,43,44,36,43,44,36,36,57,43,44,36,0,57,57,44,36,36,57,43,44,57,36,43,44,36,43,44,36,43,44,36,44,57,43,44,36,0,0,0,0,0,0,46,46,6,45,46,6,45,46,6,45,46,6,45,46,45,0,0,45,45,6,6,45,46,6,45,46,6,45,46,0,46,0,6,45,46,45,46,6,45,46,6,45,46,45,45,45,46,6,45,46,6,45,46,6,6,45,46,0,6,45,46,6,45,46,6,45,46,6,45,46,6,45,46,0,0,0,52,52,0,0,0,0,0,48,49,50,53,48,52,49,50,53,48,52,49,53,58,52,49,52,49,53,50,53,48,52,49,50,53,48,52,49,50,53,48,52,49,52,52,50,53,48,52,49,50,50,50,53,48,52,49,50,53,48,52,49,50,58,53,48,49,53,53,49,58,53,58,50,52,49,52,50,53,48,52,49,50,53,48,52,49,50,53,48,52,49,48,49,50,53,48,52,49],"f":[0,0,0,[[1,2],3],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[5],[5],[5],[5],[5],[5],[1,[[7,[6]]]],[5],[5],[5],[[1,[8,[3]]],[[9,[6]]]],[[4,10],11],[[12,10],11],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],0,[[4,13],4],[[4,14],4],[12,1],[[],4],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],0,0,[[]],[[]],[[]],0,0,[3,[[8,[17]]]],[[[18,[[8,[17]]]]],3],[[]],[[]],[3,3],[[]],[3],[5],[5],[5],[[3,3],19],[[3,10],11],[[3,10],11],[[]],[20,[[9,[3]]]],[3,21],[[],5],[[]],[[[18,[[8,[17]]]]],3],[[]],[[],2],[[3,22],[[15,[2,23]]]],[20,[[15,[3]]]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[24,25],26],[24,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[13,13],[14,14],[27,27],[28,28],[29,29],[30,30],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],31],[5],[5],[5],[5],[5],[5],[5],[13,5],[5],[14,5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[13,13],19],[[14,14],19],[[29,29],19],[[],19],[[13,10],11],[[14,10],11],[[27,10],11],[[29,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,13],[5,13],[[]],[5,14],[[]],[[]],[[]],[[]],[[29,32]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,[8,[6]],[9,[5]],28],[[15,[34,35]]]],[[13,14],33],[[],31],[5,13],[5,14],[[31,36],24],0,[[24,34,[8,[27]],[9,[6]],28],25],0,0,0,[[26,[8,[6]],[8,[6]]],37],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[8,[27]],38,[8,[38]],30],19],[[[8,[27]],37,[8,[6]]],[[15,[19,35]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[39,38],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[27]],38,34,40,40,19]],[34,34],[39,39],[[]],[[]],0,[5],[5],[39],[5],[5],[5],[5],[5],[5],[5],[[39,39],19],[[],19],[[41,10],11],[[39,10],11],[35,41],[[]],[[]],[[]],[[39,32]],[[],5],[[],5],[[],5],[[]],[[]],[[]],0,[[38,40,40,38],39],0,[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],0,[[]],[[]],[[]],0,0,0,0,[[[8,[38]],[8,[38]]],38],[[]],[[]],[[]],[[]],[[]],[[]],[36,36],[[]],[[36,6],[[15,[35]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[36,10],11],[[]],[[]],[[]],0,0,[[42,36],38],[[],5],[[],5],[[],5],[[]],[[]],[[]],0,[13],[13,43],[13,44],[5,36],[[[8,[40]],[7,[40]]],[[7,[40]]]],[[36,38,40,6],[[15,[19,35]]]],[[36,6,40,6],[[15,[[9,[38]],35]]]],0,0,0,[[],36],[43,36],[44,36],[13,36],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[36,[8,[38]],[8,[6]],38],[[15,[19,35]]]],[[36,38,6,38],[[15,[19,35]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[45,45],[46,46],[[]],[[]],[[]],[[45,40]],[6,[[15,[[7,[40]],35]]]],[3,[[15,[40,35]]]],[[45,46,47],19],[[],45],[6],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[7,[38]]],38],[[46,38]],[[[8,[3]]],6],[[6,6],19],[[45,45],19],[[46,46],19],[[],19],[[],19],[[6,10],11],[[45,10],11],[[46,10],11],[[]],[[]],[[]],0,0,[[45,32]],[[46,32]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[6],[[[8,[3]]],6],[[],45],0,[[[7,[40]]],42],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[48],[49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,40],[50,51],[52,52],[49,49],[[]],[[]],[[],53],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[52,10],11],[[52,10],11],[[]],[[]],[[]],[[]],[[]],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,[[]],[[],53],[[],48],[[],49],[[54,[7,[54]],[7,[40]]],55],[[54,[8,[54]]],19],0,[[51,40,39,[56,[40]]],40],[[],54],[[],38],0,[[]],[[]],[[],2],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[48,51,38,38,40],19],[[29,49],19],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"EntryBuilder"],[3,"String"],[3,"Attribute"],[3,"RootIssuerBuilder"],[15,"usize"],[3,"Entry"],[3,"Vec"],[15,"slice"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"RootIssuer"],[3,"MaxCardinality"],[3,"MaxEntries"],[4,"Result"],[3,"TypeId"],[15,"u8"],[8,"AsRef"],[15,"bool"],[6,"Cid"],[6,"Multihash"],[4,"Base"],[4,"Error"],[3,"Nym"],[3,"CredOffer"],[3,"DelegatedCred"],[4,"VK"],[3,"NymPublic"],[3,"NymProof"],[3,"Signature"],[3,"UserKey"],[8,"Hasher"],[3,"Signer"],[3,"Credential"],[4,"SerzDeserzError"],[3,"ParamSetCommitment"],[3,"CredProof"],[3,"G1"],[3,"RandomizedPubKey"],[3,"FieldElement"],[4,"UpdateError"],[3,"UnivarPolynomial"],[3,"SetCommitment"],[3,"CrossSetCommitment"],[3,"Pedersen"],[3,"PedersenOpen"],[6,"PedersenCommit"],[3,"ZKPSchnorr"],[3,"DamgardTransform"],[3,"ChallengeState"],[6,"Challenge"],[4,"Generator"],[3,"ZkpSchnorrFiatShamir"],[3,"G2"],[6,"Result"],[3,"Secret"],[8,"Commitment"],[8,"Schnorr"]]},\
"delanocreds_bin":{"doc":"A quick binary to test the library and get some –release …","t":"FFF","n":["basic_bench","bench_30_of_100","main"],"q":[[0,"delanocreds_bin"]],"d":["","",""],"i":[0,0,0],"f":[[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]]],"c":[],"p":[[4,"SerzDeserzError"],[4,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
