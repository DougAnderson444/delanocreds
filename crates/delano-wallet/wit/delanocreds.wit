package delano:wallet@0.1.0;

interface types {
  // An attribute is a 32 bytes hash value
  type attribute = list<u8>;
  type entry = list<attribute>;
  type nonce = list<u8>;

  record provables {
    credential: list<u8>,
    entries: list<entry>,
    selected: list<attribute>,
    nonce: list<u8>
  }

  record verifiables {
    proof: list<u8>, 
    issuer-public: list<u8>, 
    nonce: option<list<u8>>, 
    attributes: list<attribute>
  }

  /// Configuration of an Offer. Can set 3 things: 
  /// 1) without-attribute: an optional redactable record of attributes to redact,
  /// 2) additional-entry: an optional single additional entry, 
  /// 3) max-entries: the maximum number of entries the delegated party can add to the credential.
  record offer-config {
    redact: option<redactables>,
    additional-entry: option<entry>,
    /// Optionally reduces the number of entries that can be added to the credential.
    max-entries: option<u8>
  }

  /// If you want to redact an Entry containing an Attribute,
  /// construct a redactable record with all Entries and the list of Attributes to redact.
  record redactables {
    entries: list<entry>,
    remove: list<attribute>
  } 
}

interface seed-keeper {
    /// Use a get-seed function from a seed-keeper component.
    get-seed: func() -> list<u8>;
}

interface actions {
    use types.{attribute, provables, verifiables, offer-config, nonce};

    /// Returns the active Nym of the component.
    get-nym-proof: func(nonce: nonce) -> result<list<u8>, string>;

    /// Issue a credential Entry to a Nym with maximum entries.
    issue: func(nymproof: list<u8>, attributes: list<attribute>, maxentries: u8, nonce: option<list<u8>>) -> result<list<u8>, string>;

    /// Create an offer for a credential with its given entries and a given configuration.
    offer: func(cred: list<u8>, config: offer-config) -> result<list<u8>, string>;

    /// Accept a credential offer and return the accepte Credential bytes
    accept: func(offer: list<u8>) -> result<list<u8>, string>;

    /// Export a function that proves selected attributes in a given credential
    prove: func(values: provables) -> result<list<u8>, string>;

    /// Export a function that verifies a proof against a public key, nonce and selected attributes
    verify: func(values: verifiables) -> result<bool, string>;

}

/// A Delanocreds world for the component to target.
world delanocreds {

  import seed-keeper;
  export actions;
    
}
