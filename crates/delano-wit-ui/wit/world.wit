package delano:wit-ui@0.1.0;

interface context-types {

  /// The type of the app
  record page {
    name: string,
    version: string,
    description: string,
  }

  record issuer {
    attributes: list<kov>,
    max-entries: u8,
  }

  record offer {
    cred: list<u8>,
    hints: option<list<list<kov>>>
  }

  /// All details associated with a proof
  record proof {
    /// The proof itself
    proof: list<u8>,
    /// The selected Entries of attributes
    selected: list<list<list<u8>>>,
    /// The preimages
    preimages: list<list<kov>>,
  }

  record kov {
    key: string,
    op: string,
    value: string,
  }

  record everything {
    page: option<page>,
    issue: option<issuer>,
    /// The base64URLsafe unpadded encoded JSON string of the loadable data (offer or proof)
    load: option<string>,
  }

  record input-ctx {
    key: string,
    value: string,
  }

  variant kovindex {
    key(u32),
    op(u32),
    value(u32),
    selected(u32)
  }

  record entry {
    idx: u32,
    val: kovindex
  }

  record kvctx {
    ctx: entry,
    value: string,
  }

  /// The type of context provided
  variant context {
    all-content(everything),
    // issuing(issuer),
    // Adds a new attribute to an existing Entry of the Credential
    addattribute,
    // Adds a New Entry to the Credential
    newentry,
    editattribute(kvctx),
    editmaxentries(u8),
  }
}

interface wurbo-types {
  // Details required in order to add an event listener to an element
  record listen-details {
    selector: string,
    ty: string,
  }
}

/// An interface that provides an event listener to make the component interactive.
interface wurbo-in {

  use wurbo-types.{listen-details};

  // Add an event listener to the given element
  addeventlistener: func(details: listen-details);

}

interface wurbo-out {

  use context-types.{context};

  // renders the initial Web component with the given data
  // and the target template to use as top level entry point
  render: func(ctx: context) -> result<string, string>;

  // listen on all or given selectors
  activate: func(selectors: option<list<string>>);
}

/// An example world for the component to target.
world delanocreds-wit-ui {

    /// Import the wallet interface
    import delano:wallet/actions@0.1.0;
    import wurbo-in;

    export wurbo-out;
}
