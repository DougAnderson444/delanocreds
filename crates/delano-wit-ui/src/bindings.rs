// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod delano {
  pub mod wallet {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// An attribute is a 32 bytes hash value
      pub type Attribute = wit_bindgen::rt::vec::Vec::<u8>;
      pub type Entry = wit_bindgen::rt::vec::Vec::<Attribute>;
      pub type Nonce = wit_bindgen::rt::vec::Vec::<u8>;
      pub type Selected = wit_bindgen::rt::vec::Vec::<Entry>;
      #[derive(Clone)]
      pub struct Provables {
        pub credential: wit_bindgen::rt::vec::Vec::<u8>,
        pub entries: wit_bindgen::rt::vec::Vec::<Entry>,
        pub selected: wit_bindgen::rt::vec::Vec::<Attribute>,
        pub nonce: wit_bindgen::rt::vec::Vec::<u8>,
      }
      impl ::core::fmt::Debug for Provables {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Provables").field("credential", &self.credential).field("entries", &self.entries).field("selected", &self.selected).field("nonce", &self.nonce).finish()
        }
      }
      #[derive(Clone)]
      pub struct Proven {
        pub proof: wit_bindgen::rt::vec::Vec::<u8>,
        pub selected: wit_bindgen::rt::vec::Vec::<Entry>,
      }
      impl ::core::fmt::Debug for Proven {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Proven").field("proof", &self.proof).field("selected", &self.selected).finish()
        }
      }
      #[derive(Clone)]
      pub struct Verifiables {
        pub proof: wit_bindgen::rt::vec::Vec::<u8>,
        pub issuer_public: wit_bindgen::rt::vec::Vec::<u8>,
        pub nonce: Option<wit_bindgen::rt::vec::Vec::<u8>>,
        pub selected: Selected,
      }
      impl ::core::fmt::Debug for Verifiables {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Verifiables").field("proof", &self.proof).field("issuer-public", &self.issuer_public).field("nonce", &self.nonce).field("selected", &self.selected).finish()
        }
      }
      /// Issuer config: Default config creates (issues) a credential to yourself.
      /// Provide a config to offer it to someone else's nym, and optionally verify it with a nonce.
      #[derive(Clone)]
      pub struct IssueOptions {
        pub nymproof: wit_bindgen::rt::vec::Vec::<u8>,
        pub nonce: Option<wit_bindgen::rt::vec::Vec::<u8>>,
      }
      impl ::core::fmt::Debug for IssueOptions {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("IssueOptions").field("nymproof", &self.nymproof).field("nonce", &self.nonce).finish()
        }
      }
      /// If you want to redact an Entry containing an Attribute,
      /// construct a redactable record with all Entries and the list of Attributes to redact.
      #[derive(Clone)]
      pub struct Redactables {
        pub entries: wit_bindgen::rt::vec::Vec::<Entry>,
        pub remove: wit_bindgen::rt::vec::Vec::<Attribute>,
      }
      impl ::core::fmt::Debug for Redactables {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Redactables").field("entries", &self.entries).field("remove", &self.remove).finish()
        }
      }
      /// Configuration of an Offer. Can set 3 things:
      /// 1) without-attribute: an optional redactable record of attributes to redact,
      /// 2) additional-entry: an optional single additional entry,
      /// 3) max-entries: the maximum number of entries the delegated party can add to the credential.
      #[derive(Clone)]
      pub struct OfferConfig {
        pub redact: Option<Redactables>,
        pub additional_entry: Option<Entry>,
        /// Optionally reduces the number of entries that can be added to the credential.
        pub max_entries: Option<u8>,
      }
      impl ::core::fmt::Debug for OfferConfig {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("OfferConfig").field("redact", &self.redact).field("additional-entry", &self.additional_entry).field("max-entries", &self.max_entries).finish()
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod actions {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Attribute = super::super::super::delano::wallet::types::Attribute;
      pub type Provables = super::super::super::delano::wallet::types::Provables;
      pub type Verifiables = super::super::super::delano::wallet::types::Verifiables;
      pub type OfferConfig = super::super::super::delano::wallet::types::OfferConfig;
      pub type IssueOptions = super::super::super::delano::wallet::types::IssueOptions;
      pub type Nonce = super::super::super::delano::wallet::types::Nonce;
      pub type Entry = super::super::super::delano::wallet::types::Entry;
      pub type Proven = super::super::super::delano::wallet::types::Proven;
      #[allow(unused_unsafe, clippy::all)]
      /// Returns the active Nym of the component.
      pub fn get_nym_proof(nonce: &Nonce,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = nonce;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wallet/actions@0.1.0")]
          extern "C" {
            #[link_name = "get-nym-proof"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0, ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          match l2 {
            0 => {
              let e = {
                let l3 = *((ptr1 + 4) as *const i32);
                let l4 = *((ptr1 + 8) as *const i32);
                let len5 = l4 as usize;
                
                Vec::from_raw_parts(l3 as *mut _, len5, len5)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l6 = *((ptr1 + 4) as *const i32);
                let l7 = *((ptr1 + 8) as *const i32);
                let len8 = l7 as usize;
                let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                
                wit_bindgen::rt::string_lift(bytes8)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Issue a credential Entry to a Nym with maximum entries.
      /// By default issues a credential to your own Nym. To issue to others, set the options to their nymproof and optionally the nonce you gave them.
      pub fn issue(attributes: &[Attribute],maxentries: u8,options: Option<&IssueOptions>,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec1 = attributes;
          let len1 = vec1.len() as i32;
          let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
          let result1 = if layout1.size() != 0
          {
            let ptr = alloc::alloc(layout1);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout1);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec1.into_iter().enumerate() {
            let base = result1 as i32 + (i as i32) * 8;
            {
              let vec0 = e;
              let ptr0 = vec0.as_ptr() as i32;
              let len0 = vec0.len() as i32;
              *((base + 4) as *mut i32) = len0;
              *((base + 0) as *mut i32) = ptr0;
            }
          }
          let (result6_0,result6_1,result6_2,result6_3,result6_4,result6_5,) = match options {
            Some(e) => {
              let super::super::super::delano::wallet::types::IssueOptions{ nymproof:nymproof2, nonce:nonce2, } = e;
              let vec3 = nymproof2;
              let ptr3 = vec3.as_ptr() as i32;
              let len3 = vec3.len() as i32;
              let (result5_0,result5_1,result5_2,) = match nonce2 {
                Some(e) => {
                  let vec4 = e;
                  let ptr4 = vec4.as_ptr() as i32;
                  let len4 = vec4.len() as i32;
                  
                  (1i32, ptr4, len4)
                },
                None => {
                  (0i32, 0i32, 0i32)
                },
              };
              (1i32, ptr3, len3, result5_0, result5_1, result5_2)
            },
            None => {
              (0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            },
          };let ptr7 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wallet/actions@0.1.0")]
          extern "C" {
            #[link_name = "issue"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(result1 as i32, len1, wit_bindgen::rt::as_i32(maxentries), result6_0, result6_1, result6_2, result6_3, result6_4, result6_5, ptr7);
          let l8 = i32::from(*((ptr7 + 0) as *const u8));
          if layout1.size() != 0 {
            alloc::dealloc(result1, layout1);
          }
          match l8 {
            0 => {
              let e = {
                let l9 = *((ptr7 + 4) as *const i32);
                let l10 = *((ptr7 + 8) as *const i32);
                let len11 = l10 as usize;
                
                Vec::from_raw_parts(l9 as *mut _, len11, len11)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l12 = *((ptr7 + 4) as *const i32);
                let l13 = *((ptr7 + 8) as *const i32);
                let len14 = l13 as usize;
                let bytes14 = Vec::from_raw_parts(l12 as *mut _, len14, len14);
                
                wit_bindgen::rt::string_lift(bytes14)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Create an offer for a credential with its given entries and a given configuration.
      pub fn offer(cred: &[u8],config: &OfferConfig,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let mut cleanup_list = Vec::new();
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = cred;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let super::super::super::delano::wallet::types::OfferConfig{ redact:redact1, additional_entry:additional_entry1, max_entries:max_entries1, } = config;
          let (result8_0,result8_1,result8_2,result8_3,result8_4,) = match redact1 {
            Some(e) => {
              let super::super::super::delano::wallet::types::Redactables{ entries:entries2, remove:remove2, } = e;
              let vec5 = entries2;
              let len5 = vec5.len() as i32;
              let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 8, 4);
              let result5 = if layout5.size() != 0
              {
                let ptr = alloc::alloc(layout5);
                if ptr.is_null()
                {
                  alloc::handle_alloc_error(layout5);
                }
                ptr
              }else {{
                ::core::ptr::null_mut()
              }};
              for (i, e) in vec5.into_iter().enumerate() {
                let base = result5 as i32 + (i as i32) * 8;
                {
                  let vec4 = e;
                  let len4 = vec4.len() as i32;
                  let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 8, 4);
                  let result4 = if layout4.size() != 0
                  {
                    let ptr = alloc::alloc(layout4);
                    if ptr.is_null()
                    {
                      alloc::handle_alloc_error(layout4);
                    }
                    ptr
                  }else {{
                    ::core::ptr::null_mut()
                  }};
                  for (i, e) in vec4.into_iter().enumerate() {
                    let base = result4 as i32 + (i as i32) * 8;
                    {
                      let vec3 = e;
                      let ptr3 = vec3.as_ptr() as i32;
                      let len3 = vec3.len() as i32;
                      *((base + 4) as *mut i32) = len3;
                      *((base + 0) as *mut i32) = ptr3;
                    }
                  }
                  *((base + 4) as *mut i32) = len4;
                  *((base + 0) as *mut i32) = result4 as i32;
                  cleanup_list.extend_from_slice(&[(result4, layout4),]);
                }
              }
              let vec7 = remove2;
              let len7 = vec7.len() as i32;
              let layout7 = alloc::Layout::from_size_align_unchecked(vec7.len() * 8, 4);
              let result7 = if layout7.size() != 0
              {
                let ptr = alloc::alloc(layout7);
                if ptr.is_null()
                {
                  alloc::handle_alloc_error(layout7);
                }
                ptr
              }else {{
                ::core::ptr::null_mut()
              }};
              for (i, e) in vec7.into_iter().enumerate() {
                let base = result7 as i32 + (i as i32) * 8;
                {
                  let vec6 = e;
                  let ptr6 = vec6.as_ptr() as i32;
                  let len6 = vec6.len() as i32;
                  *((base + 4) as *mut i32) = len6;
                  *((base + 0) as *mut i32) = ptr6;
                }
              }
              cleanup_list.extend_from_slice(&[(result5, layout5),(result7, layout7),]);
              
              (1i32, result5 as i32, len5, result7 as i32, len7)
            },
            None => {
              (0i32, 0i32, 0i32, 0i32, 0i32)
            },
          };let (result11_0,result11_1,result11_2,) = match additional_entry1 {
            Some(e) => {
              let vec10 = e;
              let len10 = vec10.len() as i32;
              let layout10 = alloc::Layout::from_size_align_unchecked(vec10.len() * 8, 4);
              let result10 = if layout10.size() != 0
              {
                let ptr = alloc::alloc(layout10);
                if ptr.is_null()
                {
                  alloc::handle_alloc_error(layout10);
                }
                ptr
              }else {{
                ::core::ptr::null_mut()
              }};
              for (i, e) in vec10.into_iter().enumerate() {
                let base = result10 as i32 + (i as i32) * 8;
                {
                  let vec9 = e;
                  let ptr9 = vec9.as_ptr() as i32;
                  let len9 = vec9.len() as i32;
                  *((base + 4) as *mut i32) = len9;
                  *((base + 0) as *mut i32) = ptr9;
                }
              }
              cleanup_list.extend_from_slice(&[(result10, layout10),]);
              
              (1i32, result10 as i32, len10)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };let (result12_0,result12_1,) = match max_entries1 {
            Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
            None => {
              (0i32, 0i32)
            },
          };let ptr13 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wallet/actions@0.1.0")]
          extern "C" {
            #[link_name = "offer"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0, result8_0, result8_1, result8_2, result8_3, result8_4, result11_0, result11_1, result11_2, result12_0, result12_1, ptr13);
          let l14 = i32::from(*((ptr13 + 0) as *const u8));
          for (ptr, layout) in cleanup_list {
            
            if layout.size() != 0 {
              
              alloc::dealloc(ptr, layout);
              
            }
            
          }
          match l14 {
            0 => {
              let e = {
                let l15 = *((ptr13 + 4) as *const i32);
                let l16 = *((ptr13 + 8) as *const i32);
                let len17 = l16 as usize;
                
                Vec::from_raw_parts(l15 as *mut _, len17, len17)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l18 = *((ptr13 + 4) as *const i32);
                let l19 = *((ptr13 + 8) as *const i32);
                let len20 = l19 as usize;
                let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                
                wit_bindgen::rt::string_lift(bytes20)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Accept a credential offer and return the accepte Credential bytes
      pub fn accept(offer: &[u8],) -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = offer;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wallet/actions@0.1.0")]
          extern "C" {
            #[link_name = "accept"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0, ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          match l2 {
            0 => {
              let e = {
                let l3 = *((ptr1 + 4) as *const i32);
                let l4 = *((ptr1 + 8) as *const i32);
                let len5 = l4 as usize;
                
                Vec::from_raw_parts(l3 as *mut _, len5, len5)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l6 = *((ptr1 + 4) as *const i32);
                let l7 = *((ptr1 + 8) as *const i32);
                let len8 = l7 as usize;
                let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                
                wit_bindgen::rt::string_lift(bytes8)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Extend a credential with a new entry
      pub fn extend(cred: &[u8],entry: &Entry,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = cred;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let vec2 = entry;
          let len2 = vec2.len() as i32;
          let layout2 = alloc::Layout::from_size_align_unchecked(vec2.len() * 8, 4);
          let result2 = if layout2.size() != 0
          {
            let ptr = alloc::alloc(layout2);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout2);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec2.into_iter().enumerate() {
            let base = result2 as i32 + (i as i32) * 8;
            {
              let vec1 = e;
              let ptr1 = vec1.as_ptr() as i32;
              let len1 = vec1.len() as i32;
              *((base + 4) as *mut i32) = len1;
              *((base + 0) as *mut i32) = ptr1;
            }
          }
          let ptr3 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wallet/actions@0.1.0")]
          extern "C" {
            #[link_name = "extend"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0, result2 as i32, len2, ptr3);
          let l4 = i32::from(*((ptr3 + 0) as *const u8));
          if layout2.size() != 0 {
            alloc::dealloc(result2, layout2);
          }
          match l4 {
            0 => {
              let e = {
                let l5 = *((ptr3 + 4) as *const i32);
                let l6 = *((ptr3 + 8) as *const i32);
                let len7 = l6 as usize;
                
                Vec::from_raw_parts(l5 as *mut _, len7, len7)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l8 = *((ptr3 + 4) as *const i32);
                let l9 = *((ptr3 + 8) as *const i32);
                let len10 = l9 as usize;
                let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                
                wit_bindgen::rt::string_lift(bytes10)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Export a function that proves selected attributes in a given credential
      /// Returns the selected attributes in the proper order in order to verify the proof,
      /// as each Attribute needs to be verified from their respective Entry.
      pub fn prove(values: &Provables,) -> Result<Proven,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let mut cleanup_list = Vec::new();
          
          #[repr(align(4))]
          struct RetArea([u8; 20]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let super::super::super::delano::wallet::types::Provables{ credential:credential0, entries:entries0, selected:selected0, nonce:nonce0, } = values;
          let vec1 = credential0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec4 = entries0;
          let len4 = vec4.len() as i32;
          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 8, 4);
          let result4 = if layout4.size() != 0
          {
            let ptr = alloc::alloc(layout4);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout4);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec4.into_iter().enumerate() {
            let base = result4 as i32 + (i as i32) * 8;
            {
              let vec3 = e;
              let len3 = vec3.len() as i32;
              let layout3 = alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
              let result3 = if layout3.size() != 0
              {
                let ptr = alloc::alloc(layout3);
                if ptr.is_null()
                {
                  alloc::handle_alloc_error(layout3);
                }
                ptr
              }else {{
                ::core::ptr::null_mut()
              }};
              for (i, e) in vec3.into_iter().enumerate() {
                let base = result3 as i32 + (i as i32) * 8;
                {
                  let vec2 = e;
                  let ptr2 = vec2.as_ptr() as i32;
                  let len2 = vec2.len() as i32;
                  *((base + 4) as *mut i32) = len2;
                  *((base + 0) as *mut i32) = ptr2;
                }
              }
              *((base + 4) as *mut i32) = len3;
              *((base + 0) as *mut i32) = result3 as i32;
              cleanup_list.extend_from_slice(&[(result3, layout3),]);
            }
          }
          let vec6 = selected0;
          let len6 = vec6.len() as i32;
          let layout6 = alloc::Layout::from_size_align_unchecked(vec6.len() * 8, 4);
          let result6 = if layout6.size() != 0
          {
            let ptr = alloc::alloc(layout6);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout6);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec6.into_iter().enumerate() {
            let base = result6 as i32 + (i as i32) * 8;
            {
              let vec5 = e;
              let ptr5 = vec5.as_ptr() as i32;
              let len5 = vec5.len() as i32;
              *((base + 4) as *mut i32) = len5;
              *((base + 0) as *mut i32) = ptr5;
            }
          }
          let vec7 = nonce0;
          let ptr7 = vec7.as_ptr() as i32;
          let len7 = vec7.len() as i32;
          let ptr8 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wallet/actions@0.1.0")]
          extern "C" {
            #[link_name = "prove"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, result4 as i32, len4, result6 as i32, len6, ptr7, len7, ptr8);
          let l9 = i32::from(*((ptr8 + 0) as *const u8));
          if layout4.size() != 0 {
            alloc::dealloc(result4, layout4);
          }
          if layout6.size() != 0 {
            alloc::dealloc(result6, layout6);
          }
          for (ptr, layout) in cleanup_list {
            
            if layout.size() != 0 {
              
              alloc::dealloc(ptr, layout);
              
            }
            
          }
          match l9 {
            0 => {
              let e = {
                let l10 = *((ptr8 + 4) as *const i32);
                let l11 = *((ptr8 + 8) as *const i32);
                let len12 = l11 as usize;
                let l13 = *((ptr8 + 12) as *const i32);
                let l14 = *((ptr8 + 16) as *const i32);
                let base21 = l13;
                let len21 = l14;
                let mut result21 = Vec::with_capacity(len21 as usize);
                for i in 0..len21 {
                  let base = base21 + i * 8;
                  let e21 = {
                    let l15 = *((base + 0) as *const i32);
                    let l16 = *((base + 4) as *const i32);
                    let base20 = l15;
                    let len20 = l16;
                    let mut result20 = Vec::with_capacity(len20 as usize);
                    for i in 0..len20 {
                      let base = base20 + i * 8;
                      let e20 = {
                        let l17 = *((base + 0) as *const i32);
                        let l18 = *((base + 4) as *const i32);
                        let len19 = l18 as usize;
                        
                        Vec::from_raw_parts(l17 as *mut _, len19, len19)
                      };
                      result20.push(e20);
                    }
                    wit_bindgen::rt::dealloc(base20, (len20 as usize) * 8, 4);
                    
                    result20
                  };
                  result21.push(e21);
                }
                wit_bindgen::rt::dealloc(base21, (len21 as usize) * 8, 4);
                
                super::super::super::delano::wallet::types::Proven{
                  proof: Vec::from_raw_parts(l10 as *mut _, len12, len12),
                  selected: result21,
                }
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l22 = *((ptr8 + 4) as *const i32);
                let l23 = *((ptr8 + 8) as *const i32);
                let len24 = l23 as usize;
                let bytes24 = Vec::from_raw_parts(l22 as *mut _, len24, len24);
                
                wit_bindgen::rt::string_lift(bytes24)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Export a function that verifies a proof against a public key, nonce and selected attributes
      pub fn verify(values: &Verifiables,) -> Result<bool,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let mut cleanup_list = Vec::new();
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let super::super::super::delano::wallet::types::Verifiables{ proof:proof0, issuer_public:issuer_public0, nonce:nonce0, selected:selected0, } = values;
          let vec1 = proof0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = issuer_public0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          let (result4_0,result4_1,result4_2,) = match nonce0 {
            Some(e) => {
              let vec3 = e;
              let ptr3 = vec3.as_ptr() as i32;
              let len3 = vec3.len() as i32;
              
              (1i32, ptr3, len3)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };let vec7 = selected0;
          let len7 = vec7.len() as i32;
          let layout7 = alloc::Layout::from_size_align_unchecked(vec7.len() * 8, 4);
          let result7 = if layout7.size() != 0
          {
            let ptr = alloc::alloc(layout7);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout7);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec7.into_iter().enumerate() {
            let base = result7 as i32 + (i as i32) * 8;
            {
              let vec6 = e;
              let len6 = vec6.len() as i32;
              let layout6 = alloc::Layout::from_size_align_unchecked(vec6.len() * 8, 4);
              let result6 = if layout6.size() != 0
              {
                let ptr = alloc::alloc(layout6);
                if ptr.is_null()
                {
                  alloc::handle_alloc_error(layout6);
                }
                ptr
              }else {{
                ::core::ptr::null_mut()
              }};
              for (i, e) in vec6.into_iter().enumerate() {
                let base = result6 as i32 + (i as i32) * 8;
                {
                  let vec5 = e;
                  let ptr5 = vec5.as_ptr() as i32;
                  let len5 = vec5.len() as i32;
                  *((base + 4) as *mut i32) = len5;
                  *((base + 0) as *mut i32) = ptr5;
                }
              }
              *((base + 4) as *mut i32) = len6;
              *((base + 0) as *mut i32) = result6 as i32;
              cleanup_list.extend_from_slice(&[(result6, layout6),]);
            }
          }
          let ptr8 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wallet/actions@0.1.0")]
          extern "C" {
            #[link_name = "verify"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2, result4_0, result4_1, result4_2, result7 as i32, len7, ptr8);
          let l9 = i32::from(*((ptr8 + 0) as *const u8));
          if layout7.size() != 0 {
            alloc::dealloc(result7, layout7);
          }
          for (ptr, layout) in cleanup_list {
            
            if layout.size() != 0 {
              
              alloc::dealloc(ptr, layout);
              
            }
            
          }
          match l9 {
            0 => {
              let e = {
                let l10 = i32::from(*((ptr8 + 4) as *const u8));
                
                wit_bindgen::rt::bool_lift(l10 as u8)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l11 = *((ptr8 + 4) as *const i32);
                let l12 = *((ptr8 + 8) as *const i32);
                let len13 = l12 as usize;
                let bytes13 = Vec::from_raw_parts(l11 as *mut _, len13, len13);
                
                wit_bindgen::rt::string_lift(bytes13)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      
    }
    
  }
  pub mod wit_ui {
    
    #[allow(clippy::all)]
    pub mod wurbo_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_in {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type ListenDetails = super::super::super::delano::wit_ui::wurbo_types::ListenDetails;
      #[allow(unused_unsafe, clippy::all)]
      /// Add an event listener to the given element
      pub fn addeventlistener(details: &ListenDetails,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let super::super::super::delano::wit_ui::wurbo_types::ListenDetails{ selector:selector0, ty:ty0, } = details;
          let vec1 = selector0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = ty0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wit-ui/wurbo-in@0.1.0")]
          extern "C" {
            #[link_name = "addeventlistener"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2);
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod context_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// The type of the app
      #[derive(Clone)]
      pub struct Page {
        pub name: wit_bindgen::rt::string::String,
        pub version: wit_bindgen::rt::string::String,
        pub description: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("name", &self.name).field("version", &self.version).field("description", &self.description).finish()
        }
      }
      #[derive(Clone)]
      pub struct Everything {
        pub page: Option<Page>,
        /// issue: option<issuer>,
        /// The base64URLsafe unpadded encoded JSON string of the loadable data (offer or proof)
        pub load: Option<wit_bindgen::rt::string::String>,
      }
      impl ::core::fmt::Debug for Everything {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Everything").field("page", &self.page).field("load", &self.load).finish()
        }
      }
      #[derive(Clone, Copy)]
      pub enum Kovindex{
        Key(u32),
        Op(u32),
        Value(u32),
        Selected(u32),
      }
      impl ::core::fmt::Debug for Kovindex {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Kovindex::Key(e) => {
              f.debug_tuple("Kovindex::Key").field(e).finish()
            }
            Kovindex::Op(e) => {
              f.debug_tuple("Kovindex::Op").field(e).finish()
            }
            Kovindex::Value(e) => {
              f.debug_tuple("Kovindex::Value").field(e).finish()
            }
            Kovindex::Selected(e) => {
              f.debug_tuple("Kovindex::Selected").field(e).finish()
            }
          }
        }
      }
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Entry {
        pub idx: u32,
        pub val: Kovindex,
      }
      impl ::core::fmt::Debug for Entry {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Entry").field("idx", &self.idx).field("val", &self.val).finish()
        }
      }
      #[derive(Clone)]
      pub struct Kvctx {
        pub ctx: Entry,
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Kvctx {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Kvctx").field("ctx", &self.ctx).field("value", &self.value).finish()
        }
      }
      /// The type of context provided
      #[derive(Clone)]
      pub enum Context{
        AllContent(Everything),
        /// issuing(issuer),
        /// Adds a new attribute to an existing Entry of the Credential
        Addattribute,
        /// Adds a New Entry to the Credential
        Newentry,
        Editattribute(Kvctx),
        Editmaxentries(u8),
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Addattribute => {
              f.debug_tuple("Context::Addattribute").finish()
            }
            Context::Newentry => {
              f.debug_tuple("Context::Newentry").finish()
            }
            Context::Editattribute(e) => {
              f.debug_tuple("Context::Editattribute").field(e).finish()
            }
            Context::Editmaxentries(e) => {
              f.debug_tuple("Context::Editmaxentries").field(e).finish()
            }
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod delano {
    pub mod wit_ui {
      
      #[allow(clippy::all)]
      pub mod wurbo_out {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Context = super::super::super::super::delano::wit_ui::context_types::Context;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "delano:wit-ui/wurbo-out@0.1.0#render"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_render(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: i32,arg10: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            use super::super::super::super::delano::wit_ui::context_types::Context as V6;
            let v6 = match arg0 {
              0 => {
                let e6 = super::super::super::super::delano::wit_ui::context_types::Everything{
                  page: match arg1 {
                    0 => None,
                    1 => {
                      let e = {
                        let len0 = arg3 as usize;
                        let bytes0 = Vec::from_raw_parts(arg2 as *mut _, len0, len0);
                        let len1 = arg5 as usize;
                        let bytes1 = Vec::from_raw_parts(arg4 as *mut _, len1, len1);
                        let len2 = arg7 as usize;
                        let bytes2 = Vec::from_raw_parts(arg6 as *mut _, len2, len2);
                        
                        super::super::super::super::delano::wit_ui::context_types::Page{
                          name: wit_bindgen::rt::string_lift(bytes0),
                          version: wit_bindgen::rt::string_lift(bytes1),
                          description: wit_bindgen::rt::string_lift(bytes2),
                        }
                      };
                      Some(e)
                    }
                    _ => wit_bindgen::rt::invalid_enum_discriminant(),
                  },
                  load: match arg8 {
                    0 => None,
                    1 => {
                      let e = {
                        let len3 = arg10 as usize;
                        let bytes3 = Vec::from_raw_parts(arg9 as *mut _, len3, len3);
                        
                        wit_bindgen::rt::string_lift(bytes3)
                      };
                      Some(e)
                    }
                    _ => wit_bindgen::rt::invalid_enum_discriminant(),
                  },
                };
                V6::AllContent(e6)
              }
              1 => {
                V6::Addattribute
              }
              2 => {
                V6::Newentry
              }
              3 => {
                let e6 = {
                  use super::super::super::super::delano::wit_ui::context_types::Kovindex as V4;
                  let v4 = match arg2 {
                    0 => {
                      let e4 = arg3 as u32;
                      V4::Key(e4)
                    }
                    1 => {
                      let e4 = arg3 as u32;
                      V4::Op(e4)
                    }
                    2 => {
                      let e4 = arg3 as u32;
                      V4::Value(e4)
                    }
                    n => {
                      debug_assert_eq!(n, 3, "invalid enum discriminant");
                      let e4 = arg3 as u32;
                      V4::Selected(e4)
                    }
                  };
                  let len5 = arg5 as usize;
                  let bytes5 = Vec::from_raw_parts(arg4 as *mut _, len5, len5);
                  
                  super::super::super::super::delano::wit_ui::context_types::Kvctx{
                    ctx: super::super::super::super::delano::wit_ui::context_types::Entry{
                      idx: arg1 as u32,
                      val: v4,
                    },
                    value: wit_bindgen::rt::string_lift(bytes5),
                  }
                };
                V6::Editattribute(e6)
              }
              n => {
                debug_assert_eq!(n, 4, "invalid enum discriminant");
                let e6 = arg1 as u8;
                V6::Editmaxentries(e6)
              }
            };
            let result7 = <_GuestImpl as Guest>::render(v6);
            let ptr8 = _RET_AREA.0.as_mut_ptr() as i32;
            match result7 {
              Ok(e) => { {
                *((ptr8 + 0) as *mut u8) = (0i32) as u8;
                let vec9 = (e.into_bytes()).into_boxed_slice();
                let ptr9 = vec9.as_ptr() as i32;
                let len9 = vec9.len() as i32;
                ::core::mem::forget(vec9);
                *((ptr8 + 8) as *mut i32) = len9;
                *((ptr8 + 4) as *mut i32) = ptr9;
              } },
              Err(e) => { {
                *((ptr8 + 0) as *mut u8) = (1i32) as u8;
                let vec10 = (e.into_bytes()).into_boxed_slice();
                let ptr10 = vec10.as_ptr() as i32;
                let len10 = vec10.len() as i32;
                ::core::mem::forget(vec10);
                *((ptr8 + 8) as *mut i32) = len10;
                *((ptr8 + 4) as *mut i32) = ptr10;
              } },
            };ptr8
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_delano:wit-ui/wurbo-out@0.1.0#render"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_render(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "delano:wit-ui/wurbo-out@0.1.0#activate"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_activate(arg0: i32,arg1: i32,arg2: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::activate(match arg0 {
              0 => None,
              1 => {
                let e = {
                  let base3 = arg1;
                  let len3 = arg2;
                  let mut result3 = Vec::with_capacity(len3 as usize);
                  for i in 0..len3 {
                    let base = base3 + i * 8;
                    let e3 = {
                      let l0 = *((base + 0) as *const i32);
                      let l1 = *((base + 4) as *const i32);
                      let len2 = l1 as usize;
                      let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                      
                      wit_bindgen::rt::string_lift(bytes2)
                    };
                    result3.push(e3);
                  }
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                  
                  result3
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// renders the initial Web component with the given data
          /// and the target template to use as top level entry point
          fn render(ctx: Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
          /// listen on all or given selectors
          fn activate(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:delanocreds-wit-ui"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3988] = [3, 0, 18, 100, 101, 108, 97, 110, 111, 99, 114, 101, 100, 115, 45, 119, 105, 116, 45, 117, 105, 0, 97, 115, 109, 13, 0, 1, 0, 7, 217, 2, 1, 65, 2, 1, 66, 16, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 107, 1, 1, 107, 115, 1, 114, 2, 4, 112, 97, 103, 101, 2, 4, 108, 111, 97, 100, 3, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 4, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 6, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 9, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 10, 1, 114, 2, 3, 99, 116, 120, 11, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 12, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 5, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 13, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 4, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 11, 19, 1, 0, 13, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 3, 0, 0, 7, 79, 1, 65, 2, 1, 66, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 4, 1, 31, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 11, 17, 1, 0, 11, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 3, 2, 0, 7, 194, 1, 1, 65, 5, 1, 66, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 3, 1, 31, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 4, 2, 3, 2, 1, 1, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 4, 1, 28, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 2, 11, 14, 1, 0, 8, 119, 117, 114, 98, 111, 45, 105, 110, 3, 4, 0, 7, 218, 3, 1, 65, 5, 1, 66, 16, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 107, 1, 1, 107, 115, 1, 114, 2, 4, 112, 97, 103, 101, 2, 4, 108, 111, 97, 100, 3, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 4, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 6, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 9, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 10, 1, 114, 2, 3, 99, 116, 120, 11, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 12, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 5, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 13, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 11, 15, 1, 0, 9, 119, 117, 114, 98, 111, 45, 111, 117, 116, 3, 6, 0, 7, 253, 12, 1, 65, 2, 1, 65, 22, 1, 66, 29, 1, 112, 125, 4, 0, 9, 97, 116, 116, 114, 105, 98, 117, 116, 101, 3, 0, 0, 1, 112, 1, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 2, 1, 112, 125, 4, 0, 5, 110, 111, 110, 99, 101, 3, 0, 4, 1, 112, 125, 4, 0, 5, 112, 114, 111, 111, 102, 3, 0, 6, 1, 112, 3, 4, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 3, 0, 8, 1, 112, 125, 1, 112, 3, 1, 112, 1, 1, 114, 4, 10, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 10, 7, 101, 110, 116, 114, 105, 101, 115, 11, 8, 115, 101, 108, 101, 99, 116, 101, 100, 12, 5, 110, 111, 110, 99, 101, 10, 4, 0, 9, 112, 114, 111, 118, 97, 98, 108, 101, 115, 3, 0, 13, 1, 114, 2, 5, 112, 114, 111, 111, 102, 10, 8, 115, 101, 108, 101, 99, 116, 101, 100, 11, 4, 0, 6, 112, 114, 111, 118, 101, 110, 3, 0, 15, 1, 107, 10, 1, 114, 4, 5, 112, 114, 111, 111, 102, 10, 13, 105, 115, 115, 117, 101, 114, 45, 112, 117, 98, 108, 105, 99, 10, 5, 110, 111, 110, 99, 101, 17, 8, 115, 101, 108, 101, 99, 116, 101, 100, 9, 4, 0, 11, 118, 101, 114, 105, 102, 105, 97, 98, 108, 101, 115, 3, 0, 18, 1, 114, 2, 8, 110, 121, 109, 112, 114, 111, 111, 102, 10, 5, 110, 111, 110, 99, 101, 17, 4, 0, 13, 105, 115, 115, 117, 101, 45, 111, 112, 116, 105, 111, 110, 115, 3, 0, 20, 1, 114, 2, 7, 101, 110, 116, 114, 105, 101, 115, 11, 6, 114, 101, 109, 111, 118, 101, 12, 4, 0, 11, 114, 101, 100, 97, 99, 116, 97, 98, 108, 101, 115, 3, 0, 22, 1, 107, 23, 1, 107, 3, 1, 107, 125, 1, 114, 3, 6, 114, 101, 100, 97, 99, 116, 24, 16, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 45, 101, 110, 116, 114, 121, 25, 11, 109, 97, 120, 45, 101, 110, 116, 114, 105, 101, 115, 26, 4, 0, 12, 111, 102, 102, 101, 114, 45, 99, 111, 110, 102, 105, 103, 3, 0, 27, 3, 1, 25, 100, 101, 108, 97, 110, 111, 58, 119, 97, 108, 108, 101, 116, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 9, 97, 116, 116, 114, 105, 98, 117, 116, 101, 2, 3, 0, 0, 9, 112, 114, 111, 118, 97, 98, 108, 101, 115, 2, 3, 0, 0, 11, 118, 101, 114, 105, 102, 105, 97, 98, 108, 101, 115, 2, 3, 0, 0, 12, 111, 102, 102, 101, 114, 45, 99, 111, 110, 102, 105, 103, 2, 3, 0, 0, 13, 105, 115, 115, 117, 101, 45, 111, 112, 116, 105, 111, 110, 115, 2, 3, 0, 0, 5, 110, 111, 110, 99, 101, 2, 3, 0, 0, 5, 101, 110, 116, 114, 121, 2, 3, 0, 0, 6, 112, 114, 111, 118, 101, 110, 1, 66, 36, 2, 3, 2, 1, 1, 4, 0, 9, 97, 116, 116, 114, 105, 98, 117, 116, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 9, 112, 114, 111, 118, 97, 98, 108, 101, 115, 3, 0, 2, 2, 3, 2, 1, 3, 4, 0, 11, 118, 101, 114, 105, 102, 105, 97, 98, 108, 101, 115, 3, 0, 4, 2, 3, 2, 1, 4, 4, 0, 12, 111, 102, 102, 101, 114, 45, 99, 111, 110, 102, 105, 103, 3, 0, 6, 2, 3, 2, 1, 5, 4, 0, 13, 105, 115, 115, 117, 101, 45, 111, 112, 116, 105, 111, 110, 115, 3, 0, 8, 2, 3, 2, 1, 6, 4, 0, 5, 110, 111, 110, 99, 101, 3, 0, 10, 2, 3, 2, 1, 7, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 12, 2, 3, 2, 1, 8, 4, 0, 6, 112, 114, 111, 118, 101, 110, 3, 0, 14, 1, 112, 125, 1, 106, 1, 16, 1, 115, 1, 64, 1, 5, 110, 111, 110, 99, 101, 11, 0, 17, 4, 0, 13, 103, 101, 116, 45, 110, 121, 109, 45, 112, 114, 111, 111, 102, 1, 18, 1, 112, 1, 1, 107, 9, 1, 64, 3, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 19, 10, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 125, 7, 111, 112, 116, 105, 111, 110, 115, 20, 0, 17, 4, 0, 5, 105, 115, 115, 117, 101, 1, 21, 1, 64, 2, 4, 99, 114, 101, 100, 16, 6, 99, 111, 110, 102, 105, 103, 7, 0, 17, 4, 0, 5, 111, 102, 102, 101, 114, 1, 22, 1, 64, 1, 5, 111, 102, 102, 101, 114, 16, 0, 17, 4, 0, 6, 97, 99, 99, 101, 112, 116, 1, 23, 1, 64, 2, 4, 99, 114, 101, 100, 16, 5, 101, 110, 116, 114, 121, 13, 0, 17, 4, 0, 6, 101, 120, 116, 101, 110, 100, 1, 24, 1, 106, 1, 15, 1, 115, 1, 64, 1, 6, 118, 97, 108, 117, 101, 115, 3, 0, 25, 4, 0, 5, 112, 114, 111, 118, 101, 1, 26, 1, 106, 1, 127, 1, 115, 1, 64, 1, 6, 118, 97, 108, 117, 101, 115, 5, 0, 27, 4, 0, 6, 118, 101, 114, 105, 102, 121, 1, 28, 3, 1, 27, 100, 101, 108, 97, 110, 111, 58, 119, 97, 108, 108, 101, 116, 47, 97, 99, 116, 105, 111, 110, 115, 64, 48, 46, 49, 46, 48, 5, 9, 1, 66, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 3, 1, 31, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 10, 2, 3, 0, 2, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 4, 2, 3, 2, 1, 11, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 3, 1, 28, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 12, 1, 66, 16, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 107, 1, 1, 107, 115, 1, 114, 2, 4, 112, 97, 103, 101, 2, 4, 108, 111, 97, 100, 3, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 4, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 6, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 9, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 10, 1, 114, 2, 3, 99, 116, 120, 11, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 12, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 5, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 13, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 13, 2, 3, 0, 4, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 14, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 15, 4, 1, 38, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 100, 101, 108, 97, 110, 111, 99, 114, 101, 100, 115, 45, 119, 105, 116, 45, 117, 105, 64, 48, 46, 49, 46, 48, 4, 0, 11, 24, 1, 0, 18, 100, 101, 108, 97, 110, 111, 99, 114, 101, 100, 115, 45, 119, 105, 116, 45, 117, 105, 3, 8, 0, 0, 250, 7, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 119, 111, 114, 108, 100, 115, 34, 58, 123, 34, 100, 101, 108, 97, 110, 111, 99, 114, 101, 100, 115, 45, 119, 105, 116, 45, 117, 105, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 101, 120, 97, 109, 112, 108, 101, 32, 119, 111, 114, 108, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 116, 111, 32, 116, 97, 114, 103, 101, 116, 46, 34, 125, 125, 44, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 112, 97, 103, 101, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 84, 104, 101, 32, 116, 121, 112, 101, 32, 111, 102, 32, 116, 104, 101, 32, 97, 112, 112, 34, 125, 44, 34, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 34, 58, 123, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 108, 111, 97, 100, 34, 58, 34, 105, 115, 115, 117, 101, 58, 32, 111, 112, 116, 105, 111, 110, 60, 105, 115, 115, 117, 101, 114, 62, 44, 92, 110, 84, 104, 101, 32, 98, 97, 115, 101, 54, 52, 85, 82, 76, 115, 97, 102, 101, 32, 117, 110, 112, 97, 100, 100, 101, 100, 32, 101, 110, 99, 111, 100, 101, 100, 32, 74, 83, 79, 78, 32, 115, 116, 114, 105, 110, 103, 32, 111, 102, 32, 116, 104, 101, 32, 108, 111, 97, 100, 97, 98, 108, 101, 32, 100, 97, 116, 97, 32, 40, 111, 102, 102, 101, 114, 32, 111, 114, 32, 112, 114, 111, 111, 102, 41, 34, 125, 125, 44, 34, 99, 111, 110, 116, 101, 120, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 84, 104, 101, 32, 116, 121, 112, 101, 32, 111, 102, 32, 99, 111, 110, 116, 101, 120, 116, 32, 112, 114, 111, 118, 105, 100, 101, 100, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 34, 58, 34, 105, 115, 115, 117, 105, 110, 103, 40, 105, 115, 115, 117, 101, 114, 41, 44, 92, 110, 65, 100, 100, 115, 32, 97, 32, 110, 101, 119, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 111, 32, 97, 110, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 69, 110, 116, 114, 121, 32, 111, 102, 32, 116, 104, 101, 32, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 34, 44, 34, 110, 101, 119, 101, 110, 116, 114, 121, 34, 58, 34, 65, 100, 100, 115, 32, 97, 32, 78, 101, 119, 32, 69, 110, 116, 114, 121, 32, 116, 111, 32, 116, 104, 101, 32, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 34, 125, 125, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 101, 116, 97, 105, 108, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 97, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 97, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 105, 110, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 116, 104, 97, 116, 32, 112, 114, 111, 118, 105, 100, 101, 115, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 109, 97, 107, 101, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 105, 110, 116, 101, 114, 97, 99, 116, 105, 118, 101, 46, 34, 44, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 34, 58, 34, 65, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 111, 117, 116, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 114, 101, 110, 100, 101, 114, 34, 58, 34, 114, 101, 110, 100, 101, 114, 115, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 87, 101, 98, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 100, 97, 116, 97, 92, 110, 97, 110, 100, 32, 116, 104, 101, 32, 116, 97, 114, 103, 101, 116, 32, 116, 101, 109, 112, 108, 97, 116, 101, 32, 116, 111, 32, 117, 115, 101, 32, 97, 115, 32, 116, 111, 112, 32, 108, 101, 118, 101, 108, 32, 101, 110, 116, 114, 121, 32, 112, 111, 105, 110, 116, 34, 44, 34, 97, 99, 116, 105, 118, 97, 116, 101, 34, 58, 34, 108, 105, 115, 116, 101, 110, 32, 111, 110, 32, 97, 108, 108, 32, 111, 114, 32, 103, 105, 118, 101, 110, 32, 115, 101, 108, 101, 99, 116, 111, 114, 115, 34, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
